//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g 2022-03-04 23:11:48

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class labLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__46=46;
	public const int AND=4;
	public const int BOOL=5;
	public const int BY=6;
	public const int CHAR=7;
	public const int COMMA=8;
	public const int CYCLE=9;
	public const int DEC=10;
	public const int DIV=11;
	public const int ELSE=12;
	public const int EQ=13;
	public const int EQUAL=14;
	public const int ESC_SEQ=15;
	public const int EXPONENT=16;
	public const int FLOAT=17;
	public const int GE=18;
	public const int GT=19;
	public const int HEX_DIGIT=20;
	public const int ID=21;
	public const int IF=22;
	public const int INC=23;
	public const int INT=24;
	public const int LBRACKET=25;
	public const int LE=26;
	public const int LPAREN=27;
	public const int LT=28;
	public const int MINUS=29;
	public const int MUL=30;
	public const int NE=31;
	public const int OCTAL_ESC=32;
	public const int OR=33;
	public const int PLUS=34;
	public const int QUANC=35;
	public const int RBRACKET=36;
	public const int RPAREN=37;
	public const int SEMI=38;
	public const int SWITCH=39;
	public const int TBOOL=40;
	public const int TCHAR=41;
	public const int TFLOAT=42;
	public const int TINT=43;
	public const int UNICODE_ESC=44;
	public const int WS=45;

	// delegates
	// delegators

	public courseworkLexer()
	{
		OnCreated();
	}

	public courseworkLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public courseworkLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 1);
		TraceIn("T__46", 1);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;

			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:7:7: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:7:9: ':'
			{
			DebugLocation(7, 9);
			Match(':');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 1);
			LeaveRule("T__46", 1);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 2);
		TraceIn("IF", 2);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:84:4: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:84:6: 'if'
			{
			DebugLocation(84, 6);
			Match("if");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 2);
			LeaveRule("IF", 2);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 3);
		TraceIn("ELSE", 3);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:85:7: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:85:9: 'else'
			{
			DebugLocation(85, 9);
			Match("else");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 3);
			LeaveRule("ELSE", 3);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_CYCLE();
	partial void LeaveRule_CYCLE();

	// $ANTLR start "CYCLE"
	[GrammarRule("CYCLE")]
	private void mCYCLE()
	{
		EnterRule_CYCLE();
		EnterRule("CYCLE", 4);
		TraceIn("CYCLE", 4);
		try
		{
			int _type = CYCLE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:86:8: ( 'cycle' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:86:10: 'cycle'
			{
			DebugLocation(86, 10);
			Match("cycle");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CYCLE", 4);
			LeaveRule("CYCLE", 4);
			LeaveRule_CYCLE();
		}
	}
	// $ANTLR end "CYCLE"

	partial void EnterRule_SWITCH();
	partial void LeaveRule_SWITCH();

	// $ANTLR start "SWITCH"
	[GrammarRule("SWITCH")]
	private void mSWITCH()
	{
		EnterRule_SWITCH();
		EnterRule("SWITCH", 5);
		TraceIn("SWITCH", 5);
		try
		{
			int _type = SWITCH;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:87:9: ( 'switch' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:87:11: 'switch'
			{
			DebugLocation(87, 11);
			Match("switch");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SWITCH", 5);
			LeaveRule("SWITCH", 5);
			LeaveRule_SWITCH();
		}
	}
	// $ANTLR end "SWITCH"

	partial void EnterRule_BY();
	partial void LeaveRule_BY();

	// $ANTLR start "BY"
	[GrammarRule("BY")]
	private void mBY()
	{
		EnterRule_BY();
		EnterRule("BY", 6);
		TraceIn("BY", 6);
		try
		{
			int _type = BY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:88:4: ( 'by' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:88:6: 'by'
			{
			DebugLocation(88, 6);
			Match("by");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BY", 6);
			LeaveRule("BY", 6);
			LeaveRule_BY();
		}
	}
	// $ANTLR end "BY"

	partial void EnterRule_TINT();
	partial void LeaveRule_TINT();

	// $ANTLR start "TINT"
	[GrammarRule("TINT")]
	private void mTINT()
	{
		EnterRule_TINT();
		EnterRule("TINT", 7);
		TraceIn("TINT", 7);
		try
		{
			int _type = TINT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:90:6: ( 'int' | 'inte' | 'integ' | 'intege' | 'integer' )
			int alt1=5;
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1=='i'))
			{
				int LA1_2 = input.LA(2);

				if ((LA1_2=='n'))
				{
					int LA1_3 = input.LA(3);

					if ((LA1_3=='t'))
					{
						int LA1_4 = input.LA(4);

						if ((LA1_4=='e'))
						{
							int LA1_5 = input.LA(5);

							if ((LA1_5=='g'))
							{
								int LA1_6 = input.LA(6);

								if ((LA1_6=='e'))
								{
									int LA1_7 = input.LA(7);

									if ((LA1_7=='r'))
									{
										alt1 = 5;
									}
									else
									{
										alt1 = 4;
									}
								}
								else
								{
									alt1 = 3;
								}
							}
							else
							{
								alt1 = 2;
							}
						}
						else
						{
							alt1 = 1;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 1, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:90:8: 'int'
				{
				DebugLocation(90, 8);
				Match("int");


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:90:16: 'inte'
				{
				DebugLocation(90, 16);
				Match("inte");


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:90:25: 'integ'
				{
				DebugLocation(90, 25);
				Match("integ");


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:90:35: 'intege'
				{
				DebugLocation(90, 35);
				Match("intege");


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:90:46: 'integer'
				{
				DebugLocation(90, 46);
				Match("integer");


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TINT", 7);
			LeaveRule("TINT", 7);
			LeaveRule_TINT();
		}
	}
	// $ANTLR end "TINT"

	partial void EnterRule_TFLOAT();
	partial void LeaveRule_TFLOAT();

	// $ANTLR start "TFLOAT"
	[GrammarRule("TFLOAT")]
	private void mTFLOAT()
	{
		EnterRule_TFLOAT();
		EnterRule("TFLOAT", 8);
		TraceIn("TFLOAT", 8);
		try
		{
			int _type = TFLOAT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:91:8: ( 'float' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:91:10: 'float'
			{
			DebugLocation(91, 10);
			Match("float");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TFLOAT", 8);
			LeaveRule("TFLOAT", 8);
			LeaveRule_TFLOAT();
		}
	}
	// $ANTLR end "TFLOAT"

	partial void EnterRule_TCHAR();
	partial void LeaveRule_TCHAR();

	// $ANTLR start "TCHAR"
	[GrammarRule("TCHAR")]
	private void mTCHAR()
	{
		EnterRule_TCHAR();
		EnterRule("TCHAR", 9);
		TraceIn("TCHAR", 9);
		try
		{
			int _type = TCHAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:92:7: ( 'char' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:92:9: 'char'
			{
			DebugLocation(92, 9);
			Match("char");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TCHAR", 9);
			LeaveRule("TCHAR", 9);
			LeaveRule_TCHAR();
		}
	}
	// $ANTLR end "TCHAR"

	partial void EnterRule_TBOOL();
	partial void LeaveRule_TBOOL();

	// $ANTLR start "TBOOL"
	[GrammarRule("TBOOL")]
	private void mTBOOL()
	{
		EnterRule_TBOOL();
		EnterRule("TBOOL", 10);
		TraceIn("TBOOL", 10);
		try
		{
			int _type = TBOOL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:93:7: ( 'bool' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:93:9: 'bool'
			{
			DebugLocation(93, 9);
			Match("bool");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TBOOL", 10);
			LeaveRule("TBOOL", 10);
			LeaveRule_TBOOL();
		}
	}
	// $ANTLR end "TBOOL"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 11);
		TraceIn("AND", 11);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:95:5: ( '&&' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:95:7: '&&'
			{
			DebugLocation(95, 7);
			Match("&&");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 11);
			LeaveRule("AND", 11);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 12);
		TraceIn("OR", 12);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:96:4: ( '||' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:96:6: '||'
			{
			DebugLocation(96, 6);
			Match("||");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 12);
			LeaveRule("OR", 12);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_INC();
	partial void LeaveRule_INC();

	// $ANTLR start "INC"
	[GrammarRule("INC")]
	private void mINC()
	{
		EnterRule_INC();
		EnterRule("INC", 13);
		TraceIn("INC", 13);
		try
		{
			int _type = INC;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:97:6: ( '++' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:97:8: '++'
			{
			DebugLocation(97, 8);
			Match("++");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INC", 13);
			LeaveRule("INC", 13);
			LeaveRule_INC();
		}
	}
	// $ANTLR end "INC"

	partial void EnterRule_DEC();
	partial void LeaveRule_DEC();

	// $ANTLR start "DEC"
	[GrammarRule("DEC")]
	private void mDEC()
	{
		EnterRule_DEC();
		EnterRule("DEC", 14);
		TraceIn("DEC", 14);
		try
		{
			int _type = DEC;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:98:5: ( '--' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:98:7: '--'
			{
			DebugLocation(98, 7);
			Match("--");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEC", 14);
			LeaveRule("DEC", 14);
			LeaveRule_DEC();
		}
	}
	// $ANTLR end "DEC"

	partial void EnterRule_MUL();
	partial void LeaveRule_MUL();

	// $ANTLR start "MUL"
	[GrammarRule("MUL")]
	private void mMUL()
	{
		EnterRule_MUL();
		EnterRule("MUL", 15);
		TraceIn("MUL", 15);
		try
		{
			int _type = MUL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:100:6: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:100:8: '*'
			{
			DebugLocation(100, 8);
			Match('*');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUL", 15);
			LeaveRule("MUL", 15);
			LeaveRule_MUL();
		}
	}
	// $ANTLR end "MUL"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 16);
		TraceIn("DIV", 16);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:101:7: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:101:9: '/'
			{
			DebugLocation(101, 9);
			Match('/');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 16);
			LeaveRule("DIV", 16);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 17);
		TraceIn("PLUS", 17);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:102:7: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:102:9: '+'
			{
			DebugLocation(102, 9);
			Match('+');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 17);
			LeaveRule("PLUS", 17);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 18);
		TraceIn("MINUS", 18);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:103:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:103:9: '-'
			{
			DebugLocation(103, 9);
			Match('-');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 18);
			LeaveRule("MINUS", 18);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 19);
		TraceIn("GT", 19);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:105:4: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:105:6: '>'
			{
			DebugLocation(105, 6);
			Match('>');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 19);
			LeaveRule("GT", 19);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_GE();
	partial void LeaveRule_GE();

	// $ANTLR start "GE"
	[GrammarRule("GE")]
	private void mGE()
	{
		EnterRule_GE();
		EnterRule("GE", 20);
		TraceIn("GE", 20);
		try
		{
			int _type = GE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:106:4: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:106:6: '>='
			{
			DebugLocation(106, 6);
			Match(">=");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GE", 20);
			LeaveRule("GE", 20);
			LeaveRule_GE();
		}
	}
	// $ANTLR end "GE"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 21);
		TraceIn("LT", 21);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:107:4: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:107:6: '<'
			{
			DebugLocation(107, 6);
			Match('<');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 21);
			LeaveRule("LT", 21);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_LE();
	partial void LeaveRule_LE();

	// $ANTLR start "LE"
	[GrammarRule("LE")]
	private void mLE()
	{
		EnterRule_LE();
		EnterRule("LE", 22);
		TraceIn("LE", 22);
		try
		{
			int _type = LE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:108:4: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:108:6: '<='
			{
			DebugLocation(108, 6);
			Match("<=");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LE", 22);
			LeaveRule("LE", 22);
			LeaveRule_LE();
		}
	}
	// $ANTLR end "LE"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 23);
		TraceIn("EQ", 23);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:109:4: ( '==' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:109:6: '=='
			{
			DebugLocation(109, 6);
			Match("==");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 23);
			LeaveRule("EQ", 23);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_NE();
	partial void LeaveRule_NE();

	// $ANTLR start "NE"
	[GrammarRule("NE")]
	private void mNE()
	{
		EnterRule_NE();
		EnterRule("NE", 24);
		TraceIn("NE", 24);
		try
		{
			int _type = NE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:110:4: ( '!=' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:110:6: '!='
			{
			DebugLocation(110, 6);
			Match("!=");


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NE", 24);
			LeaveRule("NE", 24);
			LeaveRule_NE();
		}
	}
	// $ANTLR end "NE"

	partial void EnterRule_LBRACKET();
	partial void LeaveRule_LBRACKET();

	// $ANTLR start "LBRACKET"
	[GrammarRule("LBRACKET")]
	private void mLBRACKET()
	{
		EnterRule_LBRACKET();
		EnterRule("LBRACKET", 25);
		TraceIn("LBRACKET", 25);
		try
		{
			int _type = LBRACKET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:112:10: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:112:12: '{'
			{
			DebugLocation(112, 12);
			Match('{');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACKET", 25);
			LeaveRule("LBRACKET", 25);
			LeaveRule_LBRACKET();
		}
	}
	// $ANTLR end "LBRACKET"

	partial void EnterRule_RBRACKET();
	partial void LeaveRule_RBRACKET();

	// $ANTLR start "RBRACKET"
	[GrammarRule("RBRACKET")]
	private void mRBRACKET()
	{
		EnterRule_RBRACKET();
		EnterRule("RBRACKET", 26);
		TraceIn("RBRACKET", 26);
		try
		{
			int _type = RBRACKET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:113:10: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:113:12: '}'
			{
			DebugLocation(113, 12);
			Match('}');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACKET", 26);
			LeaveRule("RBRACKET", 26);
			LeaveRule_RBRACKET();
		}
	}
	// $ANTLR end "RBRACKET"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 27);
		TraceIn("LPAREN", 27);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:114:8: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:114:10: '('
			{
			DebugLocation(114, 10);
			Match('(');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 27);
			LeaveRule("LPAREN", 27);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 28);
		TraceIn("RPAREN", 28);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:115:8: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:115:10: ')'
			{
			DebugLocation(115, 10);
			Match(')');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 28);
			LeaveRule("RPAREN", 28);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 29);
		TraceIn("SEMI", 29);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:116:6: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:116:8: ';'
			{
			DebugLocation(116, 8);
			Match(';');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 29);
			LeaveRule("SEMI", 29);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 30);
		TraceIn("EQUAL", 30);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:117:7: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:117:9: '='
			{
			DebugLocation(117, 9);
			Match('=');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 30);
			LeaveRule("EQUAL", 30);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 31);
		TraceIn("COMMA", 31);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:118:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:118:9: ','
			{
			DebugLocation(118, 9);
			Match(',');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 31);
			LeaveRule("COMMA", 31);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 32);
		TraceIn("ID", 32);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:120:5: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( '0' .. '9' )+ ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:120:7: ( 'a' .. 'z' | 'A' .. 'Z' ) ( '0' .. '9' )+ ( 'a' .. 'z' | 'A' .. 'Z' )
			{
			DebugLocation(120, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(120, 27);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:120:27: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='0' && LA2_1<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:
					{
					DebugLocation(120, 27);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(120, 39);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 32);
			LeaveRule("ID", 32);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 33);
		TraceIn("INT", 33);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:121:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:121:7: ( '0' .. '9' )+
			{
			DebugLocation(121, 7);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:121:7: ( '0' .. '9' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if (((LA3_1>='0' && LA3_1<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:
					{
					DebugLocation(121, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 33);
			LeaveRule("INT", 33);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 34);
		TraceIn("FLOAT", 34);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:6: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
			int alt10=3;
			try { DebugEnterDecision(10, false);
			try
			{
				alt10 = dfa10.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:10: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
				{
				DebugLocation(122, 10);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:10: ( '0' .. '9' )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_1 = input.LA(1);

					if (((LA4_1>='0' && LA4_1<='9')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:
						{
						DebugLocation(122, 10);
						input.Consume();


						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(122, 22);
				Match('.');
				DebugLocation(122, 26);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:26: ( '0' .. '9' )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if (((LA5_1>='0' && LA5_1<='9')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:
						{
						DebugLocation(122, 26);
						input.Consume();


						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(122, 38);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:38: ( EXPONENT )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='E'||LA6_1=='e'))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:38: EXPONENT
					{
					DebugLocation(122, 38);
					mEXPONENT();

					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:52: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(122, 52);
				Match('.');
				DebugLocation(122, 56);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:56: ( '0' .. '9' )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if (((LA7_1>='0' && LA7_1<='9')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:
						{
						DebugLocation(122, 56);
						input.Consume();


						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(122, 68);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:68: ( EXPONENT )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1=='E'||LA8_1=='e'))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:68: EXPONENT
					{
					DebugLocation(122, 68);
					mEXPONENT();

					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:82: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(122, 82);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:122:82: ( '0' .. '9' )+
				int cnt9=0;
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if (((LA9_1>='0' && LA9_1<='9')))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:
						{
						DebugLocation(122, 82);
						input.Consume();


						}
						break;

					default:
						if (cnt9 >= 1)
							goto loop9;

						EarlyExitException eee9 = new EarlyExitException( 9, input );
						DebugRecognitionException(eee9);
						throw eee9;
					}
					cnt9++;
				}
				loop9:
					;

				} finally { DebugExitSubRule(9); }

				DebugLocation(122, 94);
				mEXPONENT();

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 34);
			LeaveRule("FLOAT", 34);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 35);
		TraceIn("WS", 35);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:123:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:123:9: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(123, 9);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(123, 37);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 35);
			LeaveRule("WS", 35);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_CHAR();
	partial void LeaveRule_CHAR();

	// $ANTLR start "CHAR"
	[GrammarRule("CHAR")]
	private void mCHAR()
	{
		EnterRule_CHAR();
		EnterRule("CHAR", 36);
		TraceIn("CHAR", 36);
		try
		{
			int _type = CHAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:124:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:124:8: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
			{
			DebugLocation(124, 8);
			Match('\'');
			DebugLocation(124, 13);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:124:13: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1=='\\'))
			{
				alt11 = 1;
			}
			else if (((LA11_1>='\u0000' && LA11_1<='&')||(LA11_1>='(' && LA11_1<='[')||(LA11_1>=']' && LA11_1<='\uFFFF')))
			{
				alt11 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:124:15: ESC_SEQ
				{
				DebugLocation(124, 15);
				mESC_SEQ();

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:124:25: ~ ( '\\'' | '\\\\' )
				{
				DebugLocation(124, 25);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(124, 40);
			Match('\'');

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR", 36);
			LeaveRule("CHAR", 36);
			LeaveRule_CHAR();
		}
	}
	// $ANTLR end "CHAR"

	partial void EnterRule_BOOL();
	partial void LeaveRule_BOOL();

	// $ANTLR start "BOOL"
	[GrammarRule("BOOL")]
	private void mBOOL()
	{
		EnterRule_BOOL();
		EnterRule("BOOL", 37);
		TraceIn("BOOL", 37);
		try
		{
			int _type = BOOL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:125:6: ( 'true' | 'false' )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1=='t'))
			{
				alt12 = 1;
			}
			else if ((LA12_1=='f'))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:125:8: 'true'
				{
				DebugLocation(125, 8);
				Match("true");


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:125:17: 'false'
				{
				DebugLocation(125, 17);
				Match("false");


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOL", 37);
			LeaveRule("BOOL", 37);
			LeaveRule_BOOL();
		}
	}
	// $ANTLR end "BOOL"

	partial void EnterRule_QUANC();
	partial void LeaveRule_QUANC();

	// $ANTLR start "QUANC"
	[GrammarRule("QUANC")]
	private void mQUANC()
	{
		EnterRule_QUANC();
		EnterRule("QUANC", 38);
		TraceIn("QUANC", 38);
		try
		{
			int _type = QUANC;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:126:6: ( 'F' ( '1' .. '4' )+ ( '0' )* )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:126:8: 'F' ( '1' .. '4' )+ ( '0' )*
			{
			DebugLocation(126, 8);
			Match('F');
			DebugLocation(126, 12);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:126:12: ( '1' .. '4' )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if (((LA13_1>='1' && LA13_1<='4')))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:
					{
					DebugLocation(126, 12);
					input.Consume();


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(126, 22);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:126:22: ( '0' )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1=='0'))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:126:22: '0'
					{
					DebugLocation(126, 22);
					Match('0');

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUANC", 38);
			LeaveRule("QUANC", 38);
			LeaveRule_QUANC();
		}
	}
	// $ANTLR end "QUANC"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 39);
		TraceIn("EXPONENT", 39);
		try
		{
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:130:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:130:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(130, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(130, 22);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:130:22: ( '+' | '-' )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1=='+'||LA15_1=='-'))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:
				{
				DebugLocation(130, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(130, 33);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:130:33: ( '0' .. '9' )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if (((LA16_1>='0' && LA16_1<='9')))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:
					{
					DebugLocation(130, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 39);
			LeaveRule("EXPONENT", 39);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 40);
		TraceIn("HEX_DIGIT", 40);
		try
		{
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:132:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:
			{
			DebugLocation(132, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 40);
			LeaveRule("HEX_DIGIT", 40);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 41);
		TraceIn("ESC_SEQ", 41);
		try
		{
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:134:8: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt17 = 1;
					}
					break;
				case 'u':
					{
					alt17 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:134:12: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(134, 12);
				Match('\\');
				DebugLocation(134, 17);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:134:58: UNICODE_ESC
				{
				DebugLocation(134, 58);
				mUNICODE_ESC();

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:134:74: OCTAL_ESC
				{
				DebugLocation(134, 74);
				mOCTAL_ESC();

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 41);
			LeaveRule("ESC_SEQ", 41);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 42);
		TraceIn("OCTAL_ESC", 42);
		try
		{
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:136:10: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt18=3;
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1=='\\'))
			{
				int LA18_2 = input.LA(2);

				if (((LA18_2>='0' && LA18_2<='3')))
				{
					int LA18_3 = input.LA(3);

					if (((LA18_3>='0' && LA18_3<='7')))
					{
						int LA18_4 = input.LA(4);

						if (((LA18_4>='0' && LA18_4<='7')))
						{
							alt18 = 1;
						}
						else
						{
							alt18 = 2;
						}
					}
					else
					{
						alt18 = 3;
					}
				}
				else if (((LA18_2>='4' && LA18_2<='7')))
				{
					int LA18_3 = input.LA(3);

					if (((LA18_3>='0' && LA18_3<='7')))
					{
						alt18 = 2;
					}
					else
					{
						alt18 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:136:14: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(136, 14);
				Match('\\');
				DebugLocation(136, 19);
				input.Consume();

				DebugLocation(136, 30);
				input.Consume();

				DebugLocation(136, 41);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:136:56: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(136, 56);
				Match('\\');
				DebugLocation(136, 61);
				input.Consume();

				DebugLocation(136, 72);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:136:87: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(136, 87);
				Match('\\');
				DebugLocation(136, 92);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 42);
			LeaveRule("OCTAL_ESC", 42);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 43);
		TraceIn("UNICODE_ESC", 43);
		try
		{
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:138:12: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:138:16: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(138, 16);
			Match('\\');
			DebugLocation(138, 21);
			Match('u');
			DebugLocation(138, 25);
			mHEX_DIGIT();
			DebugLocation(138, 35);
			mHEX_DIGIT();
			DebugLocation(138, 45);
			mHEX_DIGIT();
			DebugLocation(138, 55);
			mHEX_DIGIT();

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 43);
			LeaveRule("UNICODE_ESC", 43);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	public override void mTokens()
	{
		// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:8: ( T__46 | IF | ELSE | CYCLE | SWITCH | BY | TINT | TFLOAT | TCHAR | TBOOL | AND | OR | INC | DEC | MUL | DIV | PLUS | MINUS | GT | GE | LT | LE | EQ | NE | LBRACKET | RBRACKET | LPAREN | RPAREN | SEMI | EQUAL | COMMA | ID | INT | FLOAT | WS | CHAR | BOOL | QUANC )
		int alt19=38;
		try { DebugEnterDecision(19, false);
		try
		{
			alt19 = dfa19.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(19); }
		switch (alt19)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:10: T__46
			{
			DebugLocation(1, 10);
			mT__46();

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:16: IF
			{
			DebugLocation(1, 16);
			mIF();

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:19: ELSE
			{
			DebugLocation(1, 19);
			mELSE();

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:24: CYCLE
			{
			DebugLocation(1, 24);
			mCYCLE();

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:30: SWITCH
			{
			DebugLocation(1, 30);
			mSWITCH();

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:37: BY
			{
			DebugLocation(1, 37);
			mBY();

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:40: TINT
			{
			DebugLocation(1, 40);
			mTINT();

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:45: TFLOAT
			{
			DebugLocation(1, 45);
			mTFLOAT();

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:52: TCHAR
			{
			DebugLocation(1, 52);
			mTCHAR();

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:58: TBOOL
			{
			DebugLocation(1, 58);
			mTBOOL();

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:64: AND
			{
			DebugLocation(1, 64);
			mAND();

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:68: OR
			{
			DebugLocation(1, 68);
			mOR();

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:71: INC
			{
			DebugLocation(1, 71);
			mINC();

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:75: DEC
			{
			DebugLocation(1, 75);
			mDEC();

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:79: MUL
			{
			DebugLocation(1, 79);
			mMUL();

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:83: DIV
			{
			DebugLocation(1, 83);
			mDIV();

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:87: PLUS
			{
			DebugLocation(1, 87);
			mPLUS();

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:92: MINUS
			{
			DebugLocation(1, 92);
			mMINUS();

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:98: GT
			{
			DebugLocation(1, 98);
			mGT();

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:101: GE
			{
			DebugLocation(1, 101);
			mGE();

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:104: LT
			{
			DebugLocation(1, 104);
			mLT();

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:107: LE
			{
			DebugLocation(1, 107);
			mLE();

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:110: EQ
			{
			DebugLocation(1, 110);
			mEQ();

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:113: NE
			{
			DebugLocation(1, 113);
			mNE();

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:116: LBRACKET
			{
			DebugLocation(1, 116);
			mLBRACKET();

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:125: RBRACKET
			{
			DebugLocation(1, 125);
			mRBRACKET();

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:134: LPAREN
			{
			DebugLocation(1, 134);
			mLPAREN();

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:141: RPAREN
			{
			DebugLocation(1, 141);
			mRPAREN();

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:148: SEMI
			{
			DebugLocation(1, 148);
			mSEMI();

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:153: EQUAL
			{
			DebugLocation(1, 153);
			mEQUAL();

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:159: COMMA
			{
			DebugLocation(1, 159);
			mCOMMA();

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:165: ID
			{
			DebugLocation(1, 165);
			mID();

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:168: INT
			{
			DebugLocation(1, 168);
			mINT();

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:172: FLOAT
			{
			DebugLocation(1, 172);
			mFLOAT();

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:178: WS
			{
			DebugLocation(1, 178);
			mWS();

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:181: CHAR
			{
			DebugLocation(1, 181);
			mCHAR();

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:186: BOOL
			{
			DebugLocation(1, 186);
			mBOOL();

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\kathrinebovkun\\Documents\\SPO\\Translator\\Lab4.g:1:191: QUANC
			{
			DebugLocation(1, 191);
			mQUANC();

			}
			break;

		}

	}


	#region DFA
	DFA10 dfa10;
	DFA19 dfa19;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa10 = new DFA10(this);
		dfa19 = new DFA19(this);
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x5\xFFFF";
		private const string DFA10_eofS =
			"\x5\xFFFF";
		private const string DFA10_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA10_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA10_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA10_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "122:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\xA\xFFFF\x1\x2A\x1\x2C\x2\xFFFF\x1\x2E\x1\x30\x1\x32\x8\xFFFF\x1\x33"+
			"\x1A\xFFFF\x2\x36\x1\xFFFF";
		private const string DFA19_eofS =
			"\x37\xFFFF";
		private const string DFA19_minS =
			"\x1\x9\x1\xFFFF\x6\x30\x2\xFFFF\x1\x2B\x1\x2D\x2\xFFFF\x3\x3D\x7\xFFFF"+
			"\x1\x30\x1\x2E\x3\xFFFF\x1\x30\x16\xFFFF\x2\x30\x1\xFFFF";
		private const string DFA19_maxS =
			"\x1\x7D\x1\xFFFF\x1\x6E\x1\x6C\x1\x79\x1\x77\x1\x79\x1\x6C\x2\xFFFF\x1"+
			"\x2B\x1\x2D\x2\xFFFF\x3\x3D\x7\xFFFF\x1\x72\x1\x65\x3\xFFFF\x1\x39\x16"+
			"\xFFFF\x2\x7A\x1\xFFFF";
		private const string DFA19_acceptS =
			"\x1\xFFFF\x1\x1\x6\xFFFF\x1\xB\x1\xC\x2\xFFFF\x1\xF\x1\x10\x3\xFFFF\x1"+
			"\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1F\x2\xFFFF\x1\x22\x1\x23"+
			"\x1\x24\x1\xFFFF\x1\x20\x1\x2\x1\x7\x1\x3\x1\x4\x1\x9\x1\x5\x1\x6\x1"+
			"\xA\x1\x8\x1\x25\x1\xD\x1\x11\x1\xE\x1\x12\x1\x14\x1\x13\x1\x16\x1\x15"+
			"\x1\x17\x1\x1E\x1\x21\x2\xFFFF\x1\x26";
		private const string DFA19_specialS =
			"\x37\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x2\x1B\x2\xFFFF\x1\x1B\x12\xFFFF\x1\x1B\x1\x11\x4\xFFFF\x1\x8\x1\x1C"+
				"\x1\x14\x1\x15\x1\xC\x1\xA\x1\x17\x1\xB\x1\x1A\x1\xD\xA\x19\x1\x1\x1"+
				"\x16\x1\xF\x1\x10\x1\xE\x2\xFFFF\x5\x1E\x1\x1D\x14\x1E\x6\xFFFF\x1\x1E"+
				"\x1\x6\x1\x4\x1\x1E\x1\x3\x1\x7\x2\x1E\x1\x2\x9\x1E\x1\x5\x1\x18\x6"+
				"\x1E\x1\x12\x1\x9\x1\x13",
				"",
				"\xA\x1E\x2C\xFFFF\x1\x1F\x7\xFFFF\x1\x20",
				"\xA\x1E\x32\xFFFF\x1\x21",
				"\xA\x1E\x2E\xFFFF\x1\x23\x10\xFFFF\x1\x22",
				"\xA\x1E\x3D\xFFFF\x1\x24",
				"\xA\x1E\x35\xFFFF\x1\x26\x9\xFFFF\x1\x25",
				"\xA\x1E\x27\xFFFF\x1\x28\xA\xFFFF\x1\x27",
				"",
				"",
				"\x1\x29",
				"\x1\x2B",
				"",
				"",
				"\x1\x2D",
				"\x1\x2F",
				"\x1\x31",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x1E\x38\xFFFF\x1\x28",
				"\x1\x1A\x1\xFFFF\xA\x19\xB\xFFFF\x1\x1A\x1F\xFFFF\x1\x1A",
				"",
				"",
				"",
				"\x1\x1E\x4\x34\x5\x1E",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x35\x4\x34\x5\x1E\x7\xFFFF\x1A\x1E\x6\xFFFF\x1A\x1E",
				"\x1\x35\x9\x1E\x7\xFFFF\x1A\x1E\x6\xFFFF\x1A\x1E",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__46 | IF | ELSE | CYCLE | SWITCH | BY | TINT | TFLOAT | TCHAR | TBOOL | AND | OR | INC | DEC | MUL | DIV | PLUS | MINUS | GT | GE | LT | LE | EQ | NE | LBRACKET | RBRACKET | LPAREN | RPAREN | SEMI | EQUAL | COMMA | ID | INT | FLOAT | WS | CHAR | BOOL | QUANC );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion

}
